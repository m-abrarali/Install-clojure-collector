AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Create a multi-az, load balanced and auto Scaled tomcat web server
  with clojure.The collector is configured to span all availability zones 
  in the region and is auto-scaled based on the CPU utilisation of the 
  web servers. Notifications will be sent to the operator email address 
  on scaling events. The instances are load balanced with a simple health 
  check against the default web page. The web site is available on port 80, 
  however, the instances can be configured to listen on any port (8888 by default).
Parameters:
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: m1.small
    AllowedValues:
      - t1.micro
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.xlarge
      - m3.2xlarge
      - c1.medium
      - c1.xlarge
      - cc1.4xlarge
      - cc2.8xlarge
      - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  WebServerPort:
    Description: The TCP port for the Web Server
    Type: Number
    Default: '8888'
  OperatorEmail:
    Description: Email address to notify if there are any scaling operations
    Type: String
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: String
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Mappings:
  AWSInstanceType2Arch:
    t1.micro:
      Arch: '64'
    m1.small:
      Arch: '64'
    m1.medium:
      Arch: '64'
    m1.large:
      Arch: '64'
    m1.xlarge:
      Arch: '64'
    m2.xlarge:
      Arch: '64'
    m2.2xlarge:
      Arch: '64'
    m2.4xlarge:
      Arch: '64'
    m3.xlarge:
      Arch: '64'
    m3.2xlarge:
      Arch: '64'
    c1.medium:
      Arch: '64'
    c1.xlarge:
      Arch: '64'
  AWSRegionArch2AMI:
    eu-west-2:
      '64': 'ami-097fb276f1d9cd350'
Resources:
  NotificationTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      Subscription:
        - Endpoint:
            Ref: OperatorEmail
          Protocol: email
  WebServerGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      AvailabilityZones:
        'Fn::GetAZs': ''
      LaunchConfigurationName:
        Ref: LaunchConfig
      MinSize: '1'
      MaxSize: '3'
      LoadBalancerNames:
        - Ref: ElasticLoadBalancer
      NotificationConfiguration:
        TopicARN:
          Ref: NotificationTopic
        NotificationTypes:
          - 'autoscaling:EC2_INSTANCE_LAUNCH'
          - 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR'
          - 'autoscaling:EC2_INSTANCE_TERMINATE'
          - 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR'
  LaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      KeyName:
        Ref: KeyName
      ImageId:
        'Fn::FindInMap':
          - AWSRegionArch2AMI
          - Ref: 'AWS::Region'
          - 'Fn::FindInMap':
              - AWSInstanceType2Arch
              - Ref: InstanceType
              - Arch
      UserData:
        'Fn::Base64':
          Ref: WebServerPort
      SecurityGroups:
        - Ref: InstanceSecurityGroup
      InstanceType:
        Ref: InstanceType
  WebServerScaleUpPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: WebServerGroup
      Cooldown: '60'
      ScalingAdjustment: '1'
  WebServerScaleDownPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: WebServerGroup
      Cooldown: '60'
      ScalingAdjustment: '-1'
  CPUAlarmHigh:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: Scale-up if CPU > 70% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '70'
      AlarmActions:
        - Ref: WebServerScaleUpPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: WebServerGroup
      ComparisonOperator: GreaterThanThreshold
  CPUAlarmLow:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: Scale-down if CPU < 70% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '70'
      AlarmActions:
        - Ref: WebServerScaleDownPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: WebServerGroup
      ComparisonOperator: LessThanThreshold
  ElasticLoadBalancer:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      AvailabilityZones:
        'Fn::GetAZs': ''
      Listeners:
        - LoadBalancerPort: '80'
          InstancePort:
            Ref: WebServerPort
          Protocol: HTTP
      HealthCheck:
        Target:
          'Fn::Join':
            - ''
            - - 'HTTP:'
              - Ref: WebServerPort
              - /
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '30'
        Timeout: '5'
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access and HTTP from the load balancer only
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp:
            Ref: SSHLocation
        - IpProtocol: tcp
          FromPort:
            Ref: WebServerPort
          ToPort:
            Ref: WebServerPort
          SourceSecurityGroupOwnerId:
            'Fn::GetAtt':
              - ElasticLoadBalancer
              - SourceSecurityGroup.OwnerAlias
          SourceSecurityGroupName:
            'Fn::GetAtt':
              - ElasticLoadBalancer
              - SourceSecurityGroup.GroupName
Outputs:
  URL:
    Description: The URL of the website
    Value:
      'Fn::Join':
        - ''
        - - 'http://'
          - 'Fn::GetAtt':
              - ElasticLoadBalancer
              - DNSName
